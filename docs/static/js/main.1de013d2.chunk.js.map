{"version":3,"sources":["grid/formatter.js","grid/AppGrid.js","serviceWorker.js","index.js"],"names":["DateFormatter","_ref","value","Date","toLocaleDateString","DateTypeProvider","props","react_default","a","createElement","dx_react_grid_es","Object","assign","formatterComponent","DurationFormatter","_ref2","seconds","hours","Math","floor","minutes","concat","DurationProvider","LinkFormatter","_ref3","slug","href","LinkProvider","courses","require","columns","name","title","defaultColumnWidths","columnName","width","AppGrid","className","Paper_default","dx_react_grid_material_ui_es","rows","defaultFilters","formatter_DateTypeProvider","for","formatter_LinkProvider","formatter_DurationProvider","defaultSorting","direction","showSortingControls","Boolean","window","location","hostname","match","ReactDOM","render","src_grid_AppGrid","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yqgJAGMA,EAAgB,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MACvB,OAAQ,IAAIC,KAAKD,GAAQE,sBAGdC,EAAmB,SAAAC,GAAK,OACnCC,EAAAC,EAAAC,cAACC,EAAA,EAADC,OAAAC,OAAA,CACEC,mBAAoBb,GAChBM,KAIFQ,EAAoB,SAAAC,GAAe,IACjCC,EADiCD,EAAZb,MACH,IAClBe,EAAQC,KAAKC,MAAMH,EAAU,MAC7BI,EAAUF,KAAKC,OAAOH,EAAkB,KAARC,GAAgB,IACtD,SAAAI,OAAUJ,EAAV,MAAAI,OAAoBD,EAApB,MAGWE,EAAmB,SAAAhB,GAAK,OACnCC,EAAAC,EAAAC,cAACC,EAAA,EAADC,OAAAC,OAAA,CACEC,mBAAoBC,GAChBR,KAMFiB,EAAgB,SAAAC,GAAe,IAFpBC,EAEQvB,EAAYsB,EAAZtB,MACvB,OAAOK,EAAAC,EAAAC,cAAA,KAAGiB,MAHKD,EAGSvB,EAHV,+CAAAmB,OAAyDI,KAGtCvB,IAGtByB,EAAe,SAAArB,GAAK,OAC/BC,EAAAC,EAAAC,cAACC,EAAA,EAADC,OAAAC,OAAA,CACEC,mBAAoBU,GAChBjB,KCTFsB,UAAUC,EAAQ,MAClBC,EAAU,CAEd,CAAEC,KAAM,QAASC,MAAO,SACxB,CAAED,KAAM,mBAAoBC,MAAO,UACnC,CAAED,KAAM,yBAA0BC,MAAO,YACzC,CAAED,KAAM,cAAeC,MAAO,YAC9B,CAAED,KAAM,cAAeC,MAAO,WAC9B,CAAED,KAAM,UAAWC,MAAO,SAEtBC,EAAsB,CAC1B,CAAEC,WAAY,QAASC,MAAO,KAC9B,CAAED,WAAY,mBAAoBC,MAAO,KACzC,CAAED,WAAY,yBAA0BC,MAAO,KAC/C,CAAED,WAAY,cAAeC,MAAO,KACpC,CAAED,WAAY,cAAeC,MAAO,KACpC,CAAED,WAAY,UAAWC,MAAO,MAkCnBC,EA/BC,kBACd7B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,OACb9B,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,KACED,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CACEC,KAAMZ,EACNE,QAASA,GACTvB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAgB+B,eAAgB,KAChClC,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACiC,EAAD,CACEC,IAAK,CAAC,cAAe,iBAEvBpC,EAAAC,EAAAC,cAACmC,EAAD,CACED,IAAK,CAAC,aAERpC,EAAAC,EAAAC,cAACoC,EAAD,CACEF,IAAK,CAAC,4BAERpC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEoC,eAAgB,CAAC,CAAEZ,WAAY,QAASa,UAAW,UAErDxC,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,MACAhC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAqBN,oBAAqBA,IAC1C1B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAgBS,qBAAmB,IACnCzC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,UC5DYU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1de013d2.chunk.js","sourcesContent":["import React from 'react'\nimport { DataTypeProvider } from '@devexpress/dx-react-grid'\n\nconst DateFormatter = ({ value }) => {\n  return (new Date(value)).toLocaleDateString()\n}\n\nexport const DateTypeProvider = props => (\n  <DataTypeProvider\n    formatterComponent={DateFormatter}\n    {...props}\n  />\n)\n\nconst DurationFormatter = ({ value }) => {\n  const seconds = value / 1000\n  const hours = Math.floor(seconds / 3600)\n  const minutes = Math.floor((seconds - hours * 3600) / 60)\n  return `${hours}h ${minutes}m`\n}\n\nexport const DurationProvider = props => (\n  <DataTypeProvider\n    formatterComponent={DurationFormatter}\n    {...props}\n  />\n)\n\nconst getLink = (slug) => `https://app.pluralsight.com/library/courses/${slug}`\n\nconst LinkFormatter = ({ value }) => {\n  return <a href={getLink(value)}>{value}</a>\n}\n\nexport const LinkProvider = props => (\n  <DataTypeProvider\n    formatterComponent={LinkFormatter}\n    {...props}\n  />\n)\n","import React from 'react'\nimport Paper from '@material-ui/core/Paper';\nimport {\n  Grid,\n  Table,\n  TableHeaderRow,\n  TableFilterRow,\n  TableColumnResizing\n} from '@devexpress/dx-react-grid-material-ui'\n\nimport {\n  FilteringState,\n  IntegratedFiltering,\n} from '@devexpress/dx-react-grid'\n\nimport {\n  SortingState,\n  IntegratedSorting,\n} from '@devexpress/dx-react-grid'\n\nimport {\n  DateTypeProvider,\n  LinkProvider,\n  DurationProvider\n} from './formatter'\n\nimport './AppGrid.css'\n\nconst courses = require('../data/courses.json')\nconst columns = [\n  // { name: 'Name', title: 'name' },\n  { name: 'Title', title: 'title' },\n  { name: 'AuthorsFullnames', title: 'author' },\n  { name: 'DurationInMilliseconds', title: 'duration' },\n  { name: 'ReleaseDate', title: 'released' },\n  { name: 'UpdatedDate', title: 'updated' },\n  { name: 'UrlSlug', title: 'link' },\n]\nconst defaultColumnWidths = [\n  { columnName: 'Title', width: 300 },\n  { columnName: 'AuthorsFullnames', width: 180 },\n  { columnName: 'DurationInMilliseconds', width: 100 },\n  { columnName: 'ReleaseDate', width: 100 },\n  { columnName: 'UpdatedDate', width: 100 },\n  { columnName: 'UrlSlug', width: 160 },\n]\n\nconst AppGrid = () => (\n  <div className=\"App\">\n    <h2>Resources</h2>\n    <Paper>\n      <Grid\n        rows={courses}\n        columns={columns}>\n        <FilteringState defaultFilters={[]} />\n        <IntegratedFiltering />\n        <DateTypeProvider\n          for={['ReleaseDate', 'UpdatedDate']}\n        />\n        <LinkProvider\n          for={['UrlSlug']}\n        />\n        <DurationProvider\n          for={['DurationInMilliseconds']}\n        />\n        <SortingState\n          defaultSorting={[{ columnName: 'Title', direction: 'asc' }]}\n        />\n        <IntegratedSorting />\n        <Table />\n        <TableColumnResizing defaultColumnWidths={defaultColumnWidths} />\n        <TableHeaderRow showSortingControls />\n        <TableFilterRow />\n      </Grid>\n    </Paper>\n  </div>\n);\n\nexport default AppGrid\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './grid/AppGrid';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}